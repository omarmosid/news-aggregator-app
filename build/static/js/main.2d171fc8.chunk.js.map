{"version":3,"sources":["components/NewsItem.js","components/News.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["NewsItem","props","react_default","a","createElement","href","item","url","target","rel","Card","className","inverse","CardImg","width","src","urlToImage","alt","title","CardImgOverlay","CardTitle","News","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","renderItems","news","map","src_components_NewsItem","key","inherits","createClass","value","CardColumns","Component","Search","InputGroup","Input","onChange","handleChange","name","InputGroupAddon","addonType","Button","onClick","handleClick","App","state","searchTerm","event","setState","console","log","apiUrl","fetch","then","res","json","data","articles","catch","error","Jumbotron","style","textAlign","src_components_Search","Container","fluid","components_News","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2d171fc8.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Card, CardTitle, CardImg, CardImgOverlay } from 'reactstrap';\r\nimport './NewsItem.css'\r\n\r\nconst NewsItem = (props) => {\r\n  return (\r\n\t<a href={props.item.url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n\t\t<Card className=\"card\" inverse>\r\n\t\t\t<CardImg width=\"100%\" src={props.item.urlToImage}  alt={props.item.title}  className=\"card-filter\"/>\r\n\t\t\t<CardImgOverlay>\r\n\t\t\t\t<CardTitle>{props.item.title}</CardTitle>\r\n\t\t\t</CardImgOverlay>\r\n  \t\t</Card>\r\n\t</a>\r\n  )\r\n}\r\n\r\nexport default NewsItem\r\n\r\n// {/* <Card className=\"card\" inverse>\r\n// \t\t<CardImg width=\"100%\" src={item.urlToImage}  alt={item.title}  />\r\n// \t\t<CardImgOverlay>\r\n// \t\t\t<CardTitle>{item.title}</CardTitle>\r\n// \t\t\t<CardText>{item.description}</CardText>\r\n// \t\t\t<CardText>\r\n// \t\t\t\t<small className=\"text-muted\">{item.publishedAt}</small>\r\n// \t\t\t</CardText>\r\n// \t\t</CardImgOverlay>\r\n//   \t</Card> */}","import React, { Component } from 'react'\r\nimport NewsItem from './NewsItem.js'\r\n\r\nimport { CardColumns } from 'reactstrap';\r\n\r\nexport class News extends Component {\r\n\r\n\trenderItems = () => {\r\n\t\treturn this.props.news.map((item) => (\r\n\t\t\t// <Col lg=\"3\"></Col>\r\n\t\t\t<NewsItem key={item.url} item={item} />\r\n\t\t));\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t// <Row noGutters={true}></Row>\r\n\t\t\t<CardColumns>\r\n\t\t\t\t{this.renderItems()}\r\n\t\t\t</CardColumns>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default News\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport './Search.css'\r\n\r\nimport {\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  Input,\r\n  Button,\r\n } from 'reactstrap';\r\n\r\nexport class Search extends Component {\t\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t  <div className=\"search-container\">\r\n\t\t\t<InputGroup>\r\n\t\t\t\t<Input onChange={this.props.handleChange} name=\"searchTerm\" />\r\n\t\t\t\t<InputGroupAddon addonType=\"append\">\r\n\t\t\t\t\t<Button onClick={this.props.handleClick}>Search</Button>\r\n\t\t\t\t</InputGroupAddon>\r\n\t\t\t</InputGroup>\r\n\t\t  </div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Search;\r\n","import React, { Component } from 'react';\nimport News from './components/News.js'\nimport Search from './components/Search.js'\nimport './App.css'\n\nimport { Container, Jumbotron } from 'reactstrap';\n\nclass App extends Component {\n\n  state = {\n    news: [],\n    searchTerm: ''\n  }\n\n  handleChange = (event) => {\n\t\tthis.setState({\n\t\t\tsearchTerm: event.target.value\n\t\t})\n  }\n  \n  handleClick = () => {\n    console.log(\"Search Term: \" + this.state.searchTerm);\n    const searchType = \"everything\"\n    const apiKey = \"06e1e988dbc84cdbb021c61f1b1a2266\";\n    const apiUrl = \"https://newsapi.org/v2/\" + searchType + \"?q=\" + this.state.searchTerm + \"&apiKey=\" + apiKey;\n    console.log(\"url: \" + apiUrl);\n\t\tfetch(apiUrl)\n\t\t\t.then((res) => {\n\t\t\t\treturn res.json();\n\t\t\t})\n\t\t\t.then((data) => {\n        console.log(\"Data -> \");\n        console.log(data.articles);\n\t\t\t\tthis.setState({\n\t\t\t\t\tnews: data.articles\n\t\t\t\t})\n\t\t\t})\n\t\t\t.catch((error) => console.log(error));\n\t}\n\n  render() {\n    return (\n      <div>\n        <Jumbotron>\n          <h1 style={{textAlign: \"center\"}}>News Aggregator App</h1>\n          <br/>\n          <Search searchTerm={this.state.searchTerm} handleChange={this.handleChange} handleClick={this.handleClick}/>\n        </Jumbotron>\n        <Container fluid={false}>\n          <News news={this.state.news} />\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}